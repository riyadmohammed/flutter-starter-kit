parameters:
- name: StageDependencies
  type: object
  default: []

stages: 
  - stage: IOSBuildStage
    dependsOn: ${{ parameters.StageDependencies }}
    condition: and(succeeded(), ne(dependencies.CheckPRTitleBuildEnvironment.outputs['CheckPRTitleBuildEnvironmentJob.CheckPRTitleBuildEnvironmentTask.iosVersionName'], ''))
    jobs:
    - job: BuildiOS
      timeoutInMinutes: 30
      variables:
        - name: description
          value: $[stageDependencies.CheckPRTitleBuildEnvironment.CheckPRTitleBuildEnvironmentJob.outputs['CheckPRTitleBuildEnvironmentTask.description']]
        - name: iOSVersion
          value: $[stageDependencies.CheckPRTitleBuildEnvironment.CheckPRTitleBuildEnvironmentJob.outputs['CheckPRTitleBuildEnvironmentTask.iosVersion']]
        - name: iOSVersionName
          value: $[stageDependencies.CheckPRTitleBuildEnvironment.CheckPRTitleBuildEnvironmentJob.outputs['CheckPRTitleBuildEnvironmentTask.iosVersionName']]
      steps:
      - task: FlutterCommand@0
        displayName: "Flutter Clean"
        inputs:
          projectDirectory: '.'
          flutterDirectory: '/Users/user/fvm/versions/$(flutterVersion)/bin'
          arguments: 'clean'
      - task: Bash@3
        displayName: Saving Description into File
        inputs: 
          targetType: inline 
          script: |
            # Decode the Base64 string back to its original text
            echo "$(description)" | base64 --decode > releaseNotes.txt

      - task: InstallAppleCertificate@2
        displayName: Install certificate
        inputs:
          certSecureFile: '$(ios_distributionFileName)'
          certPwd: '$(ios_distributionFilePassword)'
          keychain: 'temp'
          opensslPkcsArgs: '-legacy'

      - task: InstallAppleProvisioningProfile@1
        displayName: Install provisioning file
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: '$(flavor)_$(ios_releaseType).mobileprovision'
          removeProfile: false
  
      - task: ios-bundle-version@1
        inputs:
          sourcePath: 'ios/Runner/Info.plist'
          versionCodeOption: 'buildid'
          versionCode: '$(iOSVersion)'
          versionName: '$(iOSVersionName)'
          printFile: true

      - task: FlutterBuild@0
        displayName: Build iOS
        inputs:
           target: 'ios'
           projectDirectory: '.'
           flutterDirectory: '/Users/user/fvm/versions/$(flutterVersion)/bin'
           buildFlavour: '$(flavor)'
           entryPoint: 'lib/main.dart'
           iosCodesign: false
           extraArgs: '--dart-define-from-file env/$(flavor)-env.json'

      - task: Bash@3
        displayName: Build xcarchive
        inputs: 
          targetType: inline 
          script: |
            /Users/user/fvm/versions/$(flutterVersion)/bin/flutter build xcarchive --no-codesign --target=lib/main.dart --flavor=$(flavor) --dart-define-from-file env/$(flavor)-env.json
      - task: Bash@3
        displayName: Codesign ios archive
        inputs:
          targetType: inline
          script: |
            codesign --entitlements ios/Runner/Runner.entitlements -f -s "$(ios_distributionCertIdentity)" build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app
      - task: Bash@3
        displayName: Export ipa
        inputs: 
          targetType: inline 
          script: |
            xcodebuild -exportArchive -archivePath build/ios/archive/Runner.xcarchive -exportOptionsPlist ios/$(flavor)ExportOptions.plist -exportPath build/ios/ipa            
     
      - task: AppStoreRelease@1
        inputs:
          authType: 'ApiKey'
          apiKeyId: '$(ios_apiKeyId)'
          apiKeyIssuerId: '$(ios_apiKeyIssuerId)'
          apitoken: '$(ios_apiToken)'
          releaseTrack: 'TestFlight'
          appIdentifier: '$(ios_appIdentifier)'
          appType: 'iOS'
          ipaPath: '**/ipa/*.ipa'
          releaseNotes: '$(Build.SourcesDirectory)/releaseNotes.txt'
          distributedToExternalTesters: true
          externalTestersGroups: '$(ios_ExternalGroupName)'
          appSpecificId: '$(ios_appSpecificId)'