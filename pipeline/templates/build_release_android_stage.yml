parameters:
  - name: StageDependencies
    type: object
    default: []

stages:
  - stage: PreBuildAndroidCleanAndConfigStage
    dependsOn: ${{ parameters.StageDependencies }}
    condition: and(succeeded(), ne(dependencies.CheckPRTitleBuildEnvironment.outputs['CheckPRTitleBuildEnvironmentJob.CheckPRTitleBuildEnvironmentTask.androidVersionName'], ''))
    jobs:
      - job: CleanSteps
        timeoutInMinutes: 5
        workspace:
          clean: all

      - job: BuildConfigurationOnEnvironment
        variables:
          environment: $[ stageDependencies.CheckPRTitleBuildEnvironment.CheckPRTitleBuildEnvironmentJob.outputs['CheckPRTitleBuildEnvironmentTask.environment']]
        steps:
          - task: PowerShell@2
            name: SetConfiguration
            inputs:
              targetType: 'inline'
              script: |
                echo "the environment value is $(environment)"
                $environment = "$(environment)"
                
                if ($environment -eq "Staging" -or $environment -eq "UAT") {
                    $artifactFolder = "apks"
                    $artifactExtension = "apk"
                    $artifactType = "apk"
                } else {
                    $artifactFolder = "aabs"
                    $artifactExtension = "aab"
                    $artifactType = "aab"
                }
                
                echo "##vso[task.setvariable variable=artifactFolder;isoutput=true]$artifactFolder"
                echo "##vso[task.setvariable variable=artifactExtension;isoutput=true]$artifactExtension"
                echo "##vso[task.setvariable variable=artifactType;isoutput=true]$artifactType"
                echo "##vso[task.setvariable variable=environment;isoutput=true]$environment"

  - stage: BuildAPKOrAABStage
    dependsOn: PreBuildAndroidCleanStage
    condition: succeeded()
    jobs:
      - job: BuildAndroidAPK
        variables:
          - name: description
            value: $[stageDependencies.CheckPRTitleBuildEnvironment.CheckPRTitleBuildEnvironmentJob.outputs['CheckPRTitleBuildEnvironmentTask.description']]
          - name: androidVersion
            value: $[stageDependencies.CheckPRTitleBuildEnvironment.CheckPRTitleBuildEnvironmentJob.outputs['CheckPRTitleBuildEnvironmentTask.androidVersion']]
          - name: androidVersionName
            value: $[stageDependencies.CheckPRTitleBuildEnvironment.CheckPRTitleBuildEnvironmentJob.outputs['CheckPRTitleBuildEnvironmentTask.androidVersionName']]
          - name: artifactType
            value: $[ stageDependencies.PreBuildAndroidCleanStage.BuildConfigurationOnEnvironment.outputs['SetConfiguration.artifactType']]
          - name: artifactExtension
            value: $[ stageDependencies.PreBuildAndroidCleanStage.BuildConfigurationOnEnvironment.outputs['SetConfiguration.artifactExtension']]
          - name: artifactFolder
            value: $[ stageDependencies.PreBuildAndroidCleanStage.BuildConfigurationOnEnvironment.outputs['SetConfiguration.artifactFolder']]
        steps:
          - task: Bash@3
            displayName: Saving Description into File
            inputs:
              targetType: inline
              script: |
                # Decode the Base64 string back to its original text
                echo "$(description)" | base64 --decode > releaseNotes.txt

          - task: DownloadSecureFile@1
            name: keyprop
            displayName: Download key properties file
            inputs:
              secureFile: $(android_keyPropFile)

          - task: DownloadSecureFile@1
            name: key
            displayName: Download signing key
            inputs:
              secureFile: $(android_signingKeyFile)

          - task: Bash@3
            displayName: Copy config files
            inputs:
              targetType: 'inline'
              script: |
                cp $(keyprop.secureFilePath) $(Build.SourcesDirectory)/android/$(android_keyPropFile)
                cp $(key.secureFilePath) $(Build.SourcesDirectory)/android/app/$(android_signingKeyFile)
                
                echo "$(android_keyPropFile) copied to $(Build.SourcesDirectory)/android/$(android_keyPropFile)"
                echo "$(android_signingKeyFile) copied to $(Build.SourcesDirectory)/android/app/$(android_signingKeyFile)"

          - task: FlutterBuild@0
            inputs:
              target: '$(artifactType)'
              projectDirectory: '.'
              flutterDirectory: '/Users/user/fvm/versions/$(flutterVersion)/bin'
              buildFlavour: '$(flavor)'
              buildNumber: '$(androidVersion)'
              buildName: '$(androidVersionName)'
              entryPoint: 'lib/main.dart'
              extraArgs: '--dart-define-from-file env/$(flavor)-env.json'

          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Build.SourcesDirectory)
              contents: '**/outputs/**/*.$(artifactType)'
              targetFolder: '$(Build.artifactStagingDirectory)'
              flattenFolders: true

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: '$(artifactFolder)'
              publishLocation: 'container'

          - task: Bash@3
            displayName: Saving Description into File
            inputs:
              targetType: inline
              script: |
                # Decode the Base64 string back to its original text
                echo "$(description)" | base64 --decode > releaseNotes.txt
                echo "artifact folder: $(artifactFolder)"

          - task: DownloadSecureFile@1
            name: keyci
            displayName: Download Firebase CI key
            inputs:
              secureFile: $(ciKeyFile)

          - task: Bash@3
            displayName: 'Check Service Account and Credentials'
            inputs:
              targetType: inline
              script: |
                echo $GOOGLE_APPLICATION_CREDENTIALS > $(keyci.secureFilePath)
                export GOOGLE_APPLICATION_CREDENTIALS=$(keyci.secureFilePath)
                
                echo "GOOGLE_APPLICATION_CREDENTIALS is set to: $GOOGLE_APPLICATION_CREDENTIALS"
                echo "Service account JSON file:"
                cat $(keyci.secureFilePath) | jq '.'
                
                if [ -f "$(keyci.secureFilePath)" ]; then
                  echo "Service account file exists."
                else
                  echo "Service account file does NOT exist."
                  exit 1
                fi

          - task: CmdLine@2
            displayName: 'Authenticate Firebase CLI with Service Account'
            inputs:
              script: |
                echo "Attempting Firebase authentication with service account..."
                if npx firebase projects:list > /dev/null 2>&1; then
                    echo "Firebase authentication successful."
                else
                    echo "Firebase authentication failed."
                    exit 1
                fi

          - task: CmdLine@2
            displayName: 'Distribute APK or AAB to Firebase'
            inputs:
              script: |
                npx firebase appdistribution:distribute "$(Build.ArtifactStagingDirectory)/app-$(flavor)-release.$(artifactType)" \
                  --app "$(appFirebaseId)" \
                  --groups "$(firebaseTestGroup)" \
                  --release-notes "$(description)"